set termguicolors
:let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

filetype off
runtime macros/matchit.vim

if has('nvim')
  let g:plugin_path = '~/nvim/plugged'
else
  let g:plugin_path = '~/.vim/plugged'
endif

call plug#begin(g:plugin_path)

" Vim layout + window related fun
Plug 'justinmk/vim-dirvish'                                 " Dirvish > netrw
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }          " View undo history as tree
Plug 'mhinz/vim-sayonara'                                   " Sanely quit buffers/windows etc.
Plug 'kopischke/vim-fetch'                                  " GNU line/column format!

" Searching related
Plug 'mhinz/vim-grepper'                                    " Async grepprg
Plug 'ctrlpvim/ctrlp.vim' | Plug 'FelikZ/ctrlp-py-matcher'

" GUI-only plugins
if has('gui')
  Plug 'vim-airline/vim-airline'
  Plug 'mhinz/vim-startify'
end

" External integrations
Plug 'airblade/vim-gitgutter'                               " Git symbols in gutter
Plug 'tpope/vim-rails'                                      " Helpful rails related shortcuts
Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'          " Git command wrappers
Plug 'tpope/vim-eunuch'                                     " Wrappers for UNIX

" built-in improvement
Plug 'romainl/vim-qf'                                       " Tame quickfix
Plug 'IanConnolly/VimCompletesMe'

" Tmux
if executable('tmux')
  Plug 'tmux-plugins/vim-tmux-focus-events'                 " FocusGained etc. in tmux!
  Plug 'benmills/vimux'                                     " Use vimux to open commands in special tmux pane
endif

" Typing/Autocomplete support
Plug 'benekastah/neomake'                                   " Neovim async syntax checker
Plug 'jiangmiao/auto-pairs'                                 " Automatically pair quotes, braces etc.
Plug 'tpope/vim-endwise'                                    " Insert 'end' in ruby as smartly as braces

" Movement/Text-alteration
Plug 'justinmk/vim-sneak'                                   " 2 character jump motion
Plug 'tpope/vim-surround'                                   " Easily deal with surrounding quotes
Plug 'tpope/vim-commentary'                                 " Comment/uncomment textobjs
Plug 'tpope/vim-unimpaired'                                 " Collection of paired commands
Plug 'tpope/vim-repeat'                                     " repeat surround/comment/unimpaired actions
Plug 'tommcdo/vim-lion'                                     " Alignment motion
Plug 'AndrewRadev/splitjoin.vim'                            " SplitJoin

" New text objs
Plug 'wellle/targets.vim'
Plug 'coderifous/textobj-word-column.vim'

" Replace-from-register operator (eg. "0riw == replace inner word with content
" from register 0)
Plug 'kana/vim-operator-user' | Plug 'kana/vim-operator-replace'

" todo-list/snippets
Plug 'junegunn/vim-journal'
Plug 'vitalk/vim-simple-todo'

" Colors
Plug 'IanConnolly/gruvbox'

" Daily work languages
Plug 'kchmck/vim-coffee-script'
Plug 'othree/html5.vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'vim-ruby/vim-ruby'

" Other stuff
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'cespare/vim-toml'
Plug 'tmux-plugins/vim-tmux'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

call plug#end()

filetype plugin indent on

if filereadable(glob("~/dotfiles/vimfiles/helpers.vim"))
  source ~/dotfiles/vimfiles/helpers.vim
endif

" Vim Settings
let mapleader="\<Space>" " Space for leader is so satisfying
syntax on

" Make vim friendlier for pairing if needed
let g:pair_programming = 0
call Load(Vimfiles("pairing.vim"))

" Command behaviour
set noshowcmd
set laststatus=2
set noruler

" Text-y stuff
set shiftround " 'h' and 'l' will wrap around lines
set whichwrap+=<,>,h,l

" Line/line number
set number
set relativenumber
set cursorline

" Tabs
set expandtab
set smarttab
set tabstop=2
set shiftwidth=2

" File-system
set autoread
set noswapfile
set nowritebackup
set nrformats-=octal

" Search
set nohlsearch
set incsearch
set ignorecase
set smartcase

" Terminal errors
set noerrorbells
set visualbell

" Key timeouts
set tm=500
set ttimeoutlen=50

" Split opening positions
set splitright
set splitbelow

" Screen scrolling behaviour
set scrolloff=10 " keep cursor relatively centered
set sidescrolloff=10

" Tagfile
set tags=./.tags;

" Showing invisible characters
set listchars=tab:»\ ,extends:›,trail:⋅ " textmate
set fillchars=stlnc:\-,vert:\|
set showbreak=›››

" Command tab-completion
set wildmenu
set wildmode=list:full,full
set wildignore=*.o,*.obj,*~,*.pyc,*.so,*.swp,tmp/
set wildignore+=*.pdf,*.jpg,*.dmg,*.zip,*.png,*.gif,*DS_Store*

set virtualedit=block

set complete+=kspell
set completeopt=menu,menuone " Don't show scratch window

set hidden
set switchbuf=useopen

set updatetime=750
set lazyredraw

set guifont=PragmataPro:h15
set macligatures
set guioptions-=r
set guioptions-=e
set guioptions-=L

if has("persistent_undo")
  let undoDir = expand('$HOME/.undodir')
  call system('mkdir -p ' . undoDir)
  let &undodir = undoDir
  set undofile
endif

" PLUGINS

" vim-ruby highlight operators
let ruby_operators    = 1
let ruby_no_expensive = 1

" Neomake
let g:neomake_ruby_enabled_makers = ['mri']
let g:neomake_open_list           = 0
let g:neomake_error_sign          = {'text': '!', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign        = {'text': 'W', 'texthl': 'NeomakeWarningSign'}
let g:neomake_message_sign        = {'text': '?', 'texthl': 'NeomakeMessageSign'}
let g:neomake_info_sign           = {'text': 'i', 'texthl': 'NeomakeInfoSign'}

" Ack.vim style quickfix mappings
let g:qf_mapping_ack_style = 1

" AutoPairs binds to Meta by default for whatever reason, we don't want that
" on OSX
let g:AutoPairsShortcutFastWrap = '<C-e>'

" Don't update as I type
let g:gitgutter_realtime           = 0
let g:gitgutter_eager              = 0
let g:gitgutter_sign_column_always = 1

" Undotree
let g:undotree_WindowLayout       = 4
let g:undotree_SplitWidth         = 35
let g:undotree_SetFocusWhenToggle = 1

function! g:Undotree_CustomMap()
  nmap <buffer> K <plug>UndotreeGoNextState
  nmap <buffer> J <plug>UndotreeGoPreviousState
  nmap <buffer> q <plug>UndotreeClose
endfunction

" Deoplete
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#enable_smart_case = 1
" let g:deoplete#max_menu_width = 60
" let g:deoplete#max_abbr_width = 150
" let g:deoplete#sources = {}
" let g:deoplete#sources._ = ['buffer']
" let g:deoplete#sources.rust = ['buffer', 'racer']
" call deoplete#custom#set('_', 'converters',
"         \ ['converter_remove_paren'])
"

" Racer
let g:racer_cmd    = "racer"
let $RUST_SRC_PATH = glob("~/rust/src/")
let $CARGO_HOME    = glob("~/cargo")

" Grepper
let g:grepper = {
  \ 'quickfix': 1,
  \ 'open': 1,
  \ 'switch': 1,
  \ 'jump': 0,
  \ 'tools': ['ag'],
  \ }

" Journal/todo
let g:simple_todo_map_keys = 0

" CtrlP
let g:ctrlp_user_command    = {
      \ 'types': {
      \ 1: ['.git', 'git -C %s ls-files --cached --exclude-standard --others'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': 'ag %s -l --nocolor -g ""'
      \ }
let g:ctrlp_map             = ''
let g:ctrlp_mruf_exclude    = '/tmp/.*\|/temp/.*' " MacOSX/Linux
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")':   ['<c-j>', '<c-n>'],
    \ 'PrtSelectMove("k")':   ['<c-k>', '<c-p>'],
    \ 'PrtHistory(-1)':       ['<down>'],
    \ 'PrtHistory(1)':        ['<up>'],
    \ }
let g:ctrlp_use_caching     = 0

" Airline
let g:airline_left_sep   = ''
let g:airline_right_sep  = ''
let g:airline_extensions = ['branch', 'whitespace', 'wordcount', 'hunks', 'ctrlp', 'neomake']

" MAPPINGS

" god who uses this
nnoremap Q <NOP>

" Fingers are already there...
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>
vnoremap <C-j> <C-d>
vnoremap <C-k> <C-u>

" Readline-style key bindings in command-line (excerpt from rsi.vim)
cnoremap        <C-A> <Home>
cnoremap        <C-B> <Left>
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"
cnoremap        <M-b> <S-Left>
cnoremap        <M-f> <S-Right>
silent! exe "set <S-Left>=\<Esc>b"
silent! exe "set <S-Right>=\<Esc>f"

" Trim trailing whitespace
nnoremap <Leader>tw :call TrimWhitespace()<CR>

if executable('ag')
  " Integrate with Ag
  set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column\ --vimgrep
  set grepformat=%f:%l:%c:%m,%f:%l:%m

  if PluginLoaded('vim-grepper')
    nmap gs  <plug>(GrepperOperator)
    xmap gs  <plug>(GrepperOperator)

    nnoremap <Leader>s :Grepper -noswitch -tool ag -cword -noprompt<CR>
    nnoremap <Leader>ag :Grepper -tool ag -query ''<Left>
    command! -nargs=* Ag Grepper -tool ag -query <args><CR>
  endif
endif

" SplitJoin Bindings
nnoremap <silent> J :<C-u>call TryWithDefault('SplitjoinJoin', 'J')<CR>
nnoremap <silent> S :<C-u>call TryWithDefault('SplitjoinSplit', "r\015")<CR>

if PluginLoaded('vim-operator-user') && PluginLoaded('vim-operator-replace')
  map r <Plug>(operator-replace)
endif

" Undo mappings
if PluginInstalled('undotree')
  nnoremap <Leader>u :UndotreeToggle<CR>
endif

" Use Sayonara for quitting
if PluginLoaded('vim-sayonara')
  nnoremap <Leader>x :Sayonara<CR>y<CR>
  nnoremap <Leader>q :w<CR>:Sayonara<CR>
else
  nnoremap <Leader>x :q!<CR>
  nnoremap <Leader>q :wq<CR>
endif

nnoremap <Leader>w :w<CR>
nnoremap <Leader>Q :q!<CR>

" Easily make changes to vimrc
if PluginLoaded('vim-plug')
  nnoremap <Leader>U :PlugInstall<CR>:PlugUpdate<CR>:PlugClean<CR>
  nnoremap <Leader>S :call GenerateSnapshot()<CR>
endif

set path=.,**
nnoremap <Leader>F :find <C-R>=expand('%:p:h').'/**/*'<CR>
nnoremap <Leader>v :vert sfind *
nnoremap <Leader>V :vert sfind <C-R>=expand('%:p:h').'/**/*'<CR>

" no need for this to be mac only; can compile from source
if PluginLoaded('ctrlp.vim')
  nnoremap <Leader>fa :CtrlP<CR>
else
  nnoremap <Leader>fa :find *
endif

cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap - :edit %%<CR>
nmap <Leader>- :edit %%

" vim-fugitive
if PluginLoaded('vim-fugitive')
  nnoremap <Leader>gb :Gblame<CR>
  nnoremap <Leader>gs :Gstatus<CR>
  nnoremap <Leader>gd :Gdiff<CR>
  nnoremap <Leader>gc :Gcommit<CR>
  nnoremap <Leader>gp :Gpush<CR>
  nnoremap <Leader>gl :Glog<CR>:copen<CR>
  nnoremap <Leader>gv :GV!<CR>
  vnoremap <Leader>gv :GV!<CR>
endif

" yank and paste from clipboard
xnoremap <Leader>y "*y
nnoremap <Leader>p "0p
nnoremap <Leader>P "0P

" Neomake errors
if PluginLoaded('neomake')
  nnoremap <Leader>e :Neomake<CR>:lopen<CR>
endif

if PluginLoaded('ctrlp.vim')
  " For fuzzy finding thru buffers
  nnoremap <Leader><Tab> :CtrlPBuffer<CR>
endif

" Switch to last active buffer
noremap <Leader><Leader> :buffer #<CR>

" Quick jump to buffers
nnoremap <Leader>b :ls<cr>:b<space>

" More logical
map Y y$

" Select last edited/pasted text
nnoremap gV `[v`]

" Select current line char-wise
nnoremap vv ^vg_

" Buhbye accidental help
nnoremap <F1> <Esc>
xnoremap <F1> <Esc>
inoremap <F1> <Esc>

" Change, highlight, repeat
nnoremap <Leader>cw *``cgn

" replace all occurences of current word
nnoremap <Leader>ra :%s/\<<C-r>=expand('<cword>')<CR>\>/

" replace occurrences inside this block
nnoremap <Leader>ri :'{,'}s/\<<C-r>=expand('<cword>')<CR>\>/

" Because un-selecting is dumb
xnoremap > >gv
xnoremap < <gv

" Make n always forward, N always backwards
nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]

" Death to arrow keys
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>

" Move lines up/down
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

" Add empty lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" COMMANDS

" Debug colours
command! SS echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')

" Because shift is hard to let go of okay
command! Wq wq
command! WQ wq
command! W w
command! Q q

command! Reload :so ~/dotfiles/vimfiles/vimrc
command! EC edit ~/dotfiles/vimfiles/vimrc
command! EV vsplit ~/dotfiles/vimfiles/vimrc
command! ES split ~/dotfiles/vimfiles/vimrc
command! Todo edit ~/.todo
command! Snip edit ~/.snippets

" AUTOCOMMANDS

augroup FileTypeSettings
  autocmd!
  autocmd FileType html setlocal ts=2 sw=2 expandtab
  autocmd FileType ruby setlocal ts=2 sw=2 expandtab
  autocmd FileType vim setlocal ts=2 sw=2 expandtab keywordprg=:help
  autocmd FileType haskell setlocal ts=2 sw=2 expandtab
  autocmd FileType python setlocal ts=4 sw=4 expandtab
  autocmd FileType javascript setlocal ts=2 sw=2 expandtab
  autocmd FileType coffee setlocal ts=2 sw=2 expandtab
  autocmd FileType sh,zsh setlocal ts=2 sw=2 expandtab
  autocmd FileType go setlocal ts=2 sw=2 noexpandtab
  autocmd FileType rust setlocal ts=4 sw=4 expandtab makeprg=cargo
  autocmd FileType yaml setlocal ts=2 sw=2 expandtab

  " Who uses modula2???
  autocmd BufNewFile,BufRead *.md set filetype=markdown
  autocmd BufNewFile,BufRead *.css set filetype=scss
  autocmd BufNewFile,BufRead *.q set filetype=sql " Hive
  autocmd BufNewFile,BufRead Fastfile,Appfile,Scanfile,Deliverfile set filetype=ruby

  autocmd BufNewFile,BufRead *todo,*snippets set filetype=journal

  autocmd BufNewFile,BufRead *todo setlocal spell nonumber
  autocmd BufNewFile,BufRead *todo nmap <buffer> <Leader>to
      \ <Plug>(simple-todo-below)
  autocmd BufNewFile,BufRead *todo nmap <buffer> <Leader>tn
      \ <Plug>(simple-todo-new)
  autocmd BufNewFile,BufRead *todo nmap <buffer> <Leader>tc
      \ <Plug>(simple-todo-mark-as-done)
  autocmd BufNewFile,BufRead *todo nmap <buffer> <Leader>tx
      \ <Plug>(simple-todo-mark-as-undone)

  autocmd BufNewFile,BufRead *snippets nnoremap <buffer> <Leader>jr
      \ o```ruby<CR>```<Esc>O<Tab>
  autocmd BufNewFile,BufRead *snippets nnoremap <buffer> <Leader>js
      \ o```sql<CR>```<Esc>O<Tab>

  autocmd CursorHold,CursorHoldI *todo,*snippets silent write

  " spell check git commit messages and markdown files
  autocmd FileType markdown setlocal spell
  autocmd FileType gitcommit setlocal spell
  autocmd FileType text setlocal spell
augroup END

augroup RubyMarks
  autocmd!
  autocmd BufLeave app/models/*.rb normal! mM
  autocmd BufLeave app/controllers/*.rb normal! mC
  autocmd BufLeave app/views/*.rb normal! mV
  autocmd BufLeave specs/*spec.rb normal! mS
augroup END

function! Help()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<CR>
  endif
endfunction

augroup VimHelp
  autocmd!
  autocmd BufEnter *.txt call Help()
augroup END

if PluginLoaded('vim-dirvish')
  augroup Dirvish
    autocmd!
    autocmd FileType dirvish nnoremap <buffer> v
        \ :vsp <C-R>=fnameescape(getline('.'))<CR><CR>
    autocmd FileType dirvish nnoremap <buffer> s
        \ :sp <C-R>=fnameescape(getline('.'))<CR><CR>
    autocmd FileType dirvish nnoremap <buffer> <C-R> :<C-U>Dirvish %<CR>
    autocmd FileType dirvish nnoremap <buffer> gh
        \ :set ma<bar>g@\v/\.[^\/]+/?$@d<cr>:set noma<cr>
  augroup END
endif

" EXTRA VIMFILES

call Load(Vimfiles("colors.vim"))

if has('nvim')
  call Load(Vimfiles("neo.vim"))
end

if has('mac')
  call Load(Vimfiles("mac.vim"))
endif

call Load("~/.vimrc.local")


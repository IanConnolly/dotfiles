filetype off
runtime macros/matchit.vim

if has('nvim')
  let g:plugin_path = '~/nvim/plugged'
else
  let g:plugin_path = '~/.vim/plugged'
endif

call plug#begin(g:plugin_path)

" Vim layout + window related fun
Plug 'justinmk/vim-dirvish'                        " Dirvish > netrw
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } " View undo history as tree
Plug 'mhinz/vim-sayonara'                          " Sanely quit buffers/windows etc.
Plug 'kopischke/vim-fetch'                         " GNU line/column format!
Plug 'tpope/vim-rsi'                               " Readline mappings in command-line mode

" Searching related
Plug 'mhinz/vim-grepper'                           " Async grepprg
Plug 'romainl/vim-qf'                              " Tame quickfix
Plug 'bronson/vim-visual-star-search'              " Search for visual selection with *
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' } | Plug 'junegunn/fzf.vim'

" External integrations
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-rails'                             " Helpful rails related shortcuts
Plug 'tpope/vim-fugitive'                          " Git command wrappers

" Built-in improvement
Plug 'unblevable/quick-scope'                      " highlight in-line f/F/t/T motions
Plug 'Konfekt/FastFold'                            " Only update folds when necessary

" Tmux
if executable('tmux')
  Plug 'tmux-plugins/vim-tmux-focus-events'        " FocusGained etc. in tmux!
  Plug 'benmills/vimux'                            " Use vimux to open commands in special tmux pane
endif

" Typing/Autocomplete support
Plug 'benekastah/neomake'                          " Neovim async syntax checker
Plug 'jiangmiao/auto-pairs'                        " Automatically pair quotes, braces etc.
Plug 'tpope/vim-endwise'                           " Insert 'end' in ruby as smartly as braces
Plug 'IanConnolly/VimCompletesMe'                  " Super lightweight smart-tab for ins-completion

" Movement/Text-alteration
Plug 'tpope/vim-surround'                          " Easily deal with surrounding quotes
Plug 'tpope/vim-commentary'                        " Comment/uncomment textobjs
Plug 'tpope/vim-unimpaired'                        " Collection of paired commands
Plug 'tpope/vim-repeat'                            " repeat surround/comment/unimpaired actions
Plug 'tommcdo/vim-lion'                            " Alignment motion

" Text objs
Plug 'wellle/targets.vim'
" User-defined text objs + erb objs + ruby objs
Plug 'kana/vim-textobj-user' | Plug 'tek/vim-textobj-ruby' | Plug 'gaving/vim-textobj-argument'

" Operators
Plug 'kana/vim-operator-user' | Plug 'kana/vim-operator-replace'

" Colors
Plug 'IanConnolly/gruvbox'                         " gruvbox fork for ruby

" Daily work languages
Plug 'kchmck/vim-coffee-script'
Plug 'othree/html5.vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'vim-ruby/vim-ruby'

Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'cespare/vim-toml'
Plug 'tmux-plugins/vim-tmux'

Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

call plug#end()

filetype plugin indent on

if filereadable(glob("~/dotfiles/vimfiles/helpers.vim"))
  source ~/dotfiles/vimfiles/helpers.vim
endif
"
" Make vim friendlier for pairing if needed
let g:pair_programming = 0

" Vim Settings
let mapleader="\<Space>" " Space for leader is so satisfying
syntax on

call Load(Vimfiles("pairing.vim"))

" Command behaviour
set noshowcmd
set laststatus=2

" Text-y stuff
set shiftround " 'h' and 'l' will wrap around lines
set whichwrap+=<,>,h,l

" Line/line number
set number
set norelativenumber
set nocursorline

" Tabs
set expandtab
set smarttab
set tabstop=2
set shiftwidth=2

" File-system
set autoread
set noswapfile
set nowritebackup
set nrformats-=octal

" Search
set nohlsearch
set incsearch
set ignorecase
set smartcase

" Terminal errors
set noerrorbells
set visualbell

" Key timeouts
set tm=500
set ttimeoutlen=50

" Split opening positions
set splitright
set splitbelow
set fillchars+=vert:\ 

" Screen scrolling behaviour
set scrolloff=10 " keep cursor relatively centered
set sidescrolloff=10

" Tagfile
set tags=./.tags;

" Showing invisible characters
set listchars=tab:»\ ,extends:›,eol:¬,trail:⋅ " textmate
set showbreak=›››
set list

" Command tab-completion
set wildmenu " command auto-completion
set wildmode=list:full,full
set wildignore=*.o,*.obj,*~,*.pyc,*.so,*.swp,tmp/
set wildignore+=*.pdf,*.jpg,*.dmg,*.zip,*.png,*.gif,*DS_Store*

set virtualedit=block

set complete+=kspell
set completeopt=menu,menuone " Don't show scratch window

set hidden
set switchbuf=useopen

set updatetime=750
set lazyredraw

set guifont=Fira\ Code\ Retina
"
" Set fold info
set foldmethod=indent
set foldminlines=0
set foldlevel=1
set foldnestmax=2
set foldopen+=jump
nmap <CR> za

" statusline
if !PluginLoaded('vim-airline')
  " show which mode we're in
  set showmode
  call Load(Vimfiles("statusline.vim"))
endif

if has("persistent_undo")
  let undoDir = expand('$HOME/.undodir')
  call system('mkdir -p ' . undoDir)
  let &undodir = undoDir
  set undofile
endif

" PLUGINS

" vim-ruby highlight operators
let ruby_operators    = 1
let ruby_no_expensive = 1

" Namespace FZF commands
let g:fzf_command_prefix = 'Fzf'

" Neomake
let g:neomake_ruby_enabled_makers = ['mri']
let g:neomake_open_list           = 0

" Ack.vim style quickfix mappings
let g:qf_mapping_ack_style = 1

" AutoPairs binds to Meta by default for whatever reason, we don't want that
" on OSX
let g:AutoPairsShortcutFastWrap = '<C-e>'

" Don't update as I type
let g:gitgutter_realtime = 0

" Yup, perf again
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Undotree
let g:undotree_WindowLayout = 2
let g:undotree_SplitWidth   = 35

let g:racer_cmd = "racer"
let $RUST_SRC_PATH=glob("~/rust/src/")

let g:grepper = {
  \ 'quickfix': 1,
  \ 'open': 1,
  \ 'switch': 1,
  \ 'jump': 0,
  \ 'tools': ['ag'],
  \ }

" MAPPINGS

" god who uses this
map q: :q
nnoremap Q <NOP>

" Fingers are already there...
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>

" Trim trailing whitespace
nnoremap <Leader>tw :call TrimWhitespace()<CR>

if executable('ag')
  " Integrate with Ag
  set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column\ --vimgrep
  set grepformat=%f:%l:%c:%m,%f:%l:%m

  if PluginLoaded('vim-grepper')
    nmap gs  <plug>(GrepperOperator)
    xmap gs  <plug>(GrepperOperator)

    nnoremap <Leader>s :Grepper -noswitch -tool ag -query '\b<C-r><C-w>\b'<CR>
    nnoremap <Leader>ag :Grepper -tool ag -query ''<Left>
    command! -nargs=* Ag Grepper -tool ag -query <args>
    command! Grep Grepper -tool ag
    command! GRep Grep
  endif
endif

if PluginLoaded('vim-operator-user') && PluginLoaded('vim-operator-replace')
  map r <Plug>(operator-replace)
endif

" Undo mappings
if PluginInstalled('undotree')
  nnoremap <Leader>u :UndotreeToggle<CR>
endif
nnoremap <Leader>du :call DeleteUndoFile()<CR>

" Use Sayonara for quitting
if PluginLoaded('vim-sayonara')
  nnoremap <Leader>x :Sayonara<CR>y<CR>
  nnoremap <Leader>q :w<CR>:Sayonara<CR>
else
  nnoremap <Leader>x :q!<CR>
  nnoremap <Leader>q :wq<CR>
endif

nnoremap <Leader>w :w<CR>
nnoremap <Leader>Q :q!<CR>

" Easily make changes to vimrc
if PluginLoaded('vim-plug')
  nnoremap <Leader>U :PlugInstall<CR>:PlugUpdate<CR>:PlugClean<CR>
  nnoremap <Leader>S :call GenerateSnapshot()<CR>
endif

set path=.,**
nnoremap <Leader>F :find <C-R>=expand('%:p:h').'/**/*'<CR>
nnoremap <Leader>v :vert sfind *
nnoremap <Leader>V :vert sfind <C-R>=expand('%:p:h').'/**/*'<CR>

" no need for this to be mac only; can compile from source
if PluginLoaded('fzf.vim')
  nnoremap <Leader>f :FzfFiles<CR>
else
  nnoremap <Leader>f :find *
endif

cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap - :edit %%<CR>
nmap <Leader>- :edit %%

" vim-fugitive
if PluginLoaded('vim-fugitive')
  nnoremap <Leader>gb :Gblame<CR>
  nnoremap <Leader>gs :Gstatus<CR>
  nnoremap <Leader>gd :Gdiff<CR>
  nnoremap <Leader>gc :Gcommit<CR>
  nnoremap <Leader>gp :Gpush<CR>
  nnoremap <Leader>gl :Glog<CR>:copen<CR>
endif

" copy and paste
xnoremap <Leader>c "*y
nnoremap <Leader>p "0p
nnoremap <Leader>P "0P

" Neomake errors
if PluginLoaded('neomake')
  nnoremap <Leader>e :Neomake<CR>:lopen<CR>
endif

if PluginLoaded('vim-surround')
  " The 'y' mnemonic doesn't really make much sense
  " and we can use the default `s` bind with `cl`
  nmap s  <Plug>Ysurround
  nmap S  <Plug>YSurround
  nmap ss <Plug>Yssurround
  nmap SS <Plug>YSsurround
endif

if PluginLoaded('fzf.vim')
  " For fuzzy finding thru buffers
  nnoremap <Leader><Tab> :FzfBuffers<CR>
  " fuzzy tags
  nnoremap <Leader>tb :FzfBTags<CR>
  nnoremap <Leader>ta :FzfTags<CR>
endif

" Switch to last active buffer
noremap <Leader><Leader> :buffer #<CR>

" Quick jump to buffers
nnoremap <Leader>b :ls<cr>:b<space>

" More logical
map Y y$

" Use matchit more (unbinds <C-i> as they're the same key)
nmap <Tab> %
xmap <Tab> %

" Be able to jump 'in' jumplist after remap ^
nnoremap <Leader>i <C-i>
" Bind <C-o> for symmetry
nnoremap <Leader>o <C-o>

" Move up and down visual lines, not real (but not when given a count)
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Select last edited/pasted text
nnoremap gV `[v`]

" Select current line char-wise
nnoremap vv ^vg_

" Buhbye accidental help
nnoremap <F1> <Esc>
xnoremap <F1> <Esc>
inoremap <F1> <Esc>

" Change, highlight, repeat
nnoremap <Leader>cw *``cgn

" replace all occurences of current word
nnoremap <Leader>ra :%s/\<<C-r>=expand('<cword>')<CR>\>/

" replace occurrences inside this block
nnoremap <Leader>ri :'{,'}s/\<<C-r>=expand('<cword>')<CR>\>/

" Because un-selecting is dumb
xnoremap > >gv
xnoremap < <gv

" Make n always forward, N always backwards
nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]

" Death to arrow keys
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>

" Move lines up/down
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

" Add empty lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" COMMANDS

" Debug colours
command! SS echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')

" Because shift is hard to let go of okay
command! Wq wq
command! WQ wq
command! W w
command! Q q

command! Reload :so ~/dotfiles/vimfiles/vimrc
command! EV vsplit ~/dotfiles/vimfiles/vimrc
command! ES split ~/dotfiles/vimfiles/vimrc

" AUTOCOMMANDS

augroup FixCRQuickfix
  autocmd!
  autocmd FileType qf nnoremap <buffer> <CR> <CR>
augroup END

augroup FileTypeSettings
  autocmd!
  autocmd FileType html setlocal ts=2 sw=2 expandtab
  autocmd FileType ruby setlocal ts=2 sw=2 expandtab
  autocmd FileType vim setlocal ts=2 sw=2 expandtab keywordprg=:help
  autocmd FileType haskell setlocal ts=2 sw=2 expandtab
  autocmd FileType python setlocal ts=4 sw=4 expandtab
  autocmd FileType javascript setlocal ts=2 sw=2 expandtab
  autocmd FileType coffee setlocal ts=2 sw=2 expandtab
  autocmd FileType sh,zsh setlocal ts=2 sw=2 expandtab
  autocmd FileType go setlocal ts=2 sw=2 noexpandtab
  autocmd FileType rust setlocal ts=4 sw=4 expandtab makeprg=cargo
  autocmd FileType yaml setlocal ts=2 sw=2 expandtab

  " Who uses modula2???
  autocmd BufNewFile,BufRead *.md set filetype=markdown
  autocmd BufNewFile,BufRead *.css set filetype=scss
  autocmd BufNewFile,BufRead *.q set filetype=sql " Hive

  autocmd BufNewFile,BufRead Fastfile,Appfile,Scanfile,Deliverfile set filetype=ruby

  " spell check git commit messages and markdown files
  autocmd FileType markdown setlocal spell
  autocmd FileType gitcommit setlocal spell
  autocmd FileType text setlocal spell
augroup END

augroup FixConcernFoldingRuby
  autocmd!
  autocmd BufRead,BufNewFile */concerns/* setlocal foldnestmax=3
augroup END

augroup RubyMarks
  autocmd!
  autocmd BufLeave app/models/*.rb normal! mM
  autocmd BufLeave app/controllers/*.rb normal! mC
  autocmd BufLeave app/views/*.rb normal! mV
  autocmd BufLeave specs/*spec.rb normal! mS
augroup END

if PluginLoaded('vim-dirvish')
  augroup Dirvish
    autocmd!
    autocmd FileType dirvish nnoremap <buffer> v
        \ :vsp <C-R>=fnameescape(getline('.'))<CR><CR>
    autocmd FileType dirvish nnoremap <buffer> s
        \ :sp <C-R>=fnameescape(getline('.'))<CR><CR>
    autocmd FileType dirvish nnoremap <buffer> <C-R> :<C-U>Dirvish %<CR>
    autocmd FileType dirvish nnoremap <buffer> gh
        \ :set ma<bar>g@\v/\.[^\/]+/?$@d<cr>:set noma<cr>
  augroup END
endif

" EXTRA VIMFILES

call Load(Vimfiles("colors.vim"))
call Load(Vimfiles("neo.vim"))

if has('mac')
  call Load(Vimfiles("mac.vim"))
endif

call Load("~/.vimrc.local")

